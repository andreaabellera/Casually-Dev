As part of the qtrlex project and preparation for the upcoming school term, I collected and surveyed resources that will make good references for my journal studies. 
My plans for my journal studies are predominantly geared to warm-up on data structures, learning best solutions to common patterns that are prevalent in competitive programming, and discovering how these well-known algorithms work. 
I have always thought that a Leetcode grind is the way, but grinding hours a day will not teach me new things per se. Thus, I'm trying an journal study plan to not only prepare myself for future programming contests and tech interviews, but also to assess a good curriculum to train other students with and to merit my own contributions to the <span class='cousine'><b>Breaking into Competitive Programming Handbook</b></span>.
    <br><br>
My experience in competitive programming had been fairly new. A colleague of mine founded a programming chapter wherewith I was able to help leading. As one with no prior competitive programming knowledge, he handed me a really good textbook that I had not had the chance to go through due to a saturation of commitments last year. I revisited the textbook today and in addition, compiled books, guides, and online courses. 
I will try some out (Educative's Grokking the Coding Interview and the HackerRank's C++ Course are on the top) and will endorse those that I find to be most beneficial. 
To my delight, these resources guided me to some good starting points! I will write my first journal entry today brushing up on <span class='cousine'><b>Breadth-First Search</b></span> and <span class='cousine'><b>Depth-First Search</b></span> as these are foundational to traversals and sets. 
These will also ease me in to optimized graph algorithms which I aim study down the road.